// generated by go run genexample.go; DO NOT EDIT

package main

var RootExample = &Example{
	Name:        "",
	Description: "",
	Data:        ``,
	Sub: []*Example{
		&Example{
			Name:        "Suite",
			Description: "A generic Suite",
			Data: `// A generic Suite
{
    Name: "Suite for Testing Load"
    KeepCookies: true
    OmitChecks: false
    Setup: [
        { File: "a.ht"
          Variables: {
              VAR_A: "vala2",
              VAR_C: "valc"
          }
        }
    ],
    comment: "see Foo. B et al., Journal of examples and Comments 123, p456",
    Main: [
        {File: "a.ht"}
        {File: "b.ht", Variables: {"foo": "bar"}}
	{File: "c/d.ht"}
        {File: "a.ht", Mocks: ["m1.mock", "lastname.mock"]}
    ],
    Teardown: [
       {File: "b.ht"}
    ]
    Variables: {
       VARNAME: "varvalue"
    }
}`,
		}, &Example{
			Name:        "Test",
			Description: "A generic Test",
			Data: `// A generic Test
{
    // Name is used during reporting. Make it short and printable.
    Name: "Simple Test"

    Description: '''
        This description is not used but it is nice to
        provide same background information on this test.
    '''

    // Details of the Request follow:
    Request: {
        // The HTTP method. Defaults to GET.
        Method: "GET"    

        // The URL of the request. Can contain query parameter (but these
        // must be properly encoded).
	// Notethe use a variable substitution: {{HOST}} is replaced with the
        // current value of the HOST variable.
        URL:    "http://{{HOST}}/html?q=xyz"
	
	// Header contains the specific http headers to be sent in this request.
	// User-Agent and Accept headers are set automatically to what Chrome
	// sends if not set explicitly.
        Header: {
            Accept-Language: "en,fr"
        }

        // Add URL parameter
        Params: {
            w: "why so?"      // automatic URL-encoding
            u: [123, "abc"]   // can send multiple u
        }

        Timeout: "25s"   // Use longer timeout then the default 10s
        FollowRedirects: true  // Follow redirect chain until non 30x is sent.
    }

    // The list of checks to apply.
    Checks: [
        {Check: "StatusCode", Expect: 200}
        {Check: "ResponseTime", Lower: "700ms"}
    ]

    // Variables provides default values for the variables. The default
    // values can be overwritten from Suites and from the command line.
    Variables: {
        HOST: "www.example.org"
    }
}`,
			Sub: []*Example{
				&Example{
					Name:        "Test.Cookies",
					Description: "Testing setting and deleting Cookies in Set-Cookie headers",
					Data: `// Testing setting and deleting Cookies in Set-Cookie headers
{
    Name: "Test SeCookie Headers"
    Request: {
        URL: "http://{{HOST}}/other"
        Timeout: 2s
    }
    Checks: [
        {Check: "StatusCode", Expect: 200}

	// Cookie cip was set to any value with any properties:
        {Check: "SetCookie", Name: "cip"}

	// Make sure cip's path is /
        {Check: "SetCookie", Name: "cip", Path: {Equals: "/"}}

        // Value is 20 to 32 alphanumeric characters
        {Check: "SetCookie", Name: "cip", Value: {Regexp: "[[:alnum:]]{20,32}"}}

	// cip is persistent (not a session cookie) with a lifetime of at
	// least 10 minutes and Http-Only
        {Check: "SetCookie", Name: "cip", MinLifetime: "10m"
            Type: "persistent httpOnly"}

        // Make sure cookie tzu gets deleted properly
        {Check: "DeleteCookie", Name: "tzu"}
    ]
}`,
				}, &Example{
					Name:        "Test.FollowRedirect",
					Description: "Automatic follow of redirects and suitable tests ",
					Data: `// Automatic follow of redirects and suitable tests 
{
    Name: "Follow Redirections"
    Request: {
        URL: "http://{{HOST}}/redirect2"
        FollowRedirects: true
    }
    Checks: [
        // FollowRedirects follows redirects until 200 is received.
        {Check: "StatusCode", Expect: 200}

        // Check intermediate locations.
        {Check: "RedirectChain"
            Via: [ ".../redirect1", ".../html" ]
        }

	// Apply condition to final URL. Here full equality.
        {Check: "FinalURL", Equals: "http://{{HOST}}/html"}
    ]
}`,
				}, &Example{
					Name:        "Test.HTML",
					Description: "Testing HTML documents",
					Data: `// Testing HTML documents
{
    Name: "Test of HTML page"
    Request: {
        URL: "http://{{HOST}}/html"
        Timeout: 2s
    }
    Checks: [
        {Check: "StatusCode", Expect: 200}
        {Check: "ResponseTime", Lower: "700ms"}
        {Check: "ContentType", Is: "text/html"}
        {Check: "UTF8Encoded"}
        {Check: "ValidHTML"}

        // Uncomment if it's okay to send response to W3C Validator. 
        // {Check: "W3CValidHTML", AllowedErrors: 5}  

        // Make sure resources linked from the HTML document are accessable.
        {Check: "Links"
            Which: "a link img script"  // check only these tags
            Head: true                  // HEAD request is enough
            Concurrency: 8              // check 8 links in parallel
            IgnoredLinks: [
                // No need to check these links
                {Contains: "facebook.com"},
                {Equals: "http://www.twitter.com/foo/bar"}
            ]
            FailMixedContent: true
        }
    ]
}`,
				}, &Example{
					Name:        "Test.Image",
					Description: "Testing images",
					Data: `// Testing images
{
    Name: "Test of a PNG image"
    Request: {
        URL: "http://{{HOST}}/lena"
    }
    Checks: [
        {Check: "StatusCode", Expect: 200}
        {Check: "Image"}  // response is an image
        {Check: "Image", Format: "png"}  // it's a PNG image
        {Check: "Image", Width: 20, Height: 20}  // proper size

	// Check color fingerprint of image.
        {Check: "Image", Fingerprint: "-P000000Zn0000l0100a030a", Threshold: 0.0025}

	// Check block-mean-value (BMV) fingerprint of image
        {Check: "Image", Fingerprint: "be1cbd8d0b0b0f8c"}

        // Combined
        {Check: "Image", Fingerprint: "be1cbd8d0b0b0f8c", Width: 20, Height: 20, Format: "png"}

        // Check full binary identity:
        {Check: "Identity", SHA1: "f2534d702f0b18907162d7017357608ab2a40e2b"}
    ]
}`,
				}, &Example{
					Name:        "Test.JSON",
					Description: "Testing JSON documents",
					Data: `// Testing JSON documents
{
    Name: "Test of a JSON document"
    Request: {
        URL: "http://{{HOST}}/json"
    }
    Checks: [
        {Check: "StatusCode", Expect: 200}
        {Check: "UTF8Encoded"}
        {Check: "ContentType", Is: "application/json"}

        // Valid JSON, don't care about anything else.
        {Check: "JSON"}

        // Presence of field "Date", any value of any type is okay.
        {Check: "JSON", Element: "Date"}

        // Check value of Date fields. Pay attention to quotes of strings.
        {Check: "JSON", Element: "Date", Equals: "\"2017-09-20\""}
        {Check: "JSON", Element: "Date", Contains: "2017-09-20"}
        {Check: "JSON", Element: "Finished", Equals: "true"}

        // Access to deeply nested elements.
        {Check: "JSON", Element: "Numbers.0", Equals: "6"}
        {Check: "JSON", Element: "Numbers.1", GreaterThan: 6, LessThan: 45}
        // Change field seperator if your field names contain the default "."
        {Check: "JSON", Sep: "_@_",  Element: "a.b_@_wuz_@_1", Equals: "9"}

        // Check structure of JSON and type of data with Schema.
        {Check: "JSON", Schema: '''
            {
               "Date":     "",
               "Numbers":  [0,0,0,0,0,0],
               "Finished": false,
               "Raw":      "",
               "a.b":      { "wuz": [] }
            }'''
        }

        // Interpret and check strings which contain embedded JSON:
        {Check: "JSON", Element: "Raw", Embedded: {Element: "coord.1", Equals: "-1"}}
        {Check: "JSON", Element: "Raw", Embedded: {Element: "label", Equals: "\"X\""}}

        // There's a different check for JSON: JSONExpr
        {Check: "JSONExpr", Expression: "$len(.Numbers) > 4"}
        {Check: "JSONExpr", Expression: "$max(.Numbers) == 38"}
    ]
}`,
				}, &Example{
					Name:        "Test.POST",
					Description: "Generating POST requests",
					Data: `// Generating POST requests
{
    Name: "Test a POST request"
    Request: {
        Method:   "POST"
        URL:      "http://{{HOST}}/post"
        ParamsAs: "body"   // send as application/x-www-form-urlencoded in body
        Params: {
            "action":      "update"  // simple
            "data[1][7]":  12        // fancy parameter name
            "what":        "automatic encoding+escaping!" // let ht do the hard stuff
            "several": [ "foo", "bar", 123 ]  // multiple values
        }
    }
    Checks: [
        {Check: "StatusCode", Expect: 200}
    ]
}`,
					Sub: []*Example{
						&Example{
							Name:        "Test.POST.BodyFromFile",
							Description: "Reading a POST body from a file",
							Data: `// Reading a POST body from a file
{
    Name: "Test body read from file"
    Request: {
        Method:  "POST"
        URL:     "http://{{HOST}}/post"
	Header:  { "Content-Type": "application/json" }

        // Body can use @file and @vfile just like Params:
        // The @vfile version will perform variable substitution in the
        // content of somefile. Note how somefile is read realtive to
        // directory of this test-file.
        Body: "@vfile:{{TEST_DIR}}/somefile"

        // Use the @file form if no variable substitution inside somefile
	// shal be performed.	
        // Body: "@file:{{TEST_DIR}}/somefile"
    }

    Checks: [
        {Check: "StatusCode", Expect: 200}
        {Check: "Body", Contains: "TheFoo"}
    ]

    Variables: { FOO: "TheFoo" }
}`,
						}, &Example{
							Name:        "Test.POST.FileUpload",
							Description: "Uploading files as multipart data",
							Data: `// Uploading files as multipart data
{
    Name: "Test file uploads"
    Request: {
        Method:   "POST"
        URL:      "http://{{HOST}}/post"
        ParamsAs: "multipart"   // send as multipart/form-data
        Params: {
            // action is a simple parameter
            "action":  "update"
 
            // upload exact content of Test.HTML from current folder as file1
            "file1":  "@file:{{TEST_DIR}}/somefile"

            // substitute variables in Test.HTML before uploading
            "file2":  "@vfile:{{TEST_DIR}}/somefile"
        }
    }

    Checks: [
        {Check: "StatusCode", Expect: 200}
    ]

    Variables: { FOO: "TheFoo" }
}`,
						}, &Example{
							Name:        "Test.POST.ManualBody",
							Description: "Manualy defining a POST body.",
							Data: `// Manualy defining a POST body.
{
    Name: "Test POST body"
    Request: {
        Method:  "POST"
        URL:     "http://{{HOST}}/post"
	Header:  { "Content-Type": "application/json" }

	// Manualy crafted request body. 
        Body: '''  {"status": "success"}  '''

        // Body can use @file and @vfile just like Params:
        // The @vfile version will perform variable substitution in the
        // content of somefile. Note how somefile is read realtive to
        // directory of this test-file.
        // Body: "@vfile:{{TEST_DIR}}/somefile"

        // Use the @file form if no variable substitution inside somefile
	// shal be performed.	
        // Body: "@file:{{TEST_DIR}}/somefile"
    }
    Checks: [
        {Check: "StatusCode", Expect: 200}
        {Check: "Body", Contains: "success"}
    ]
}`,
						}},
				}, &Example{
					Name:        "Test.Redirection",
					Description: "Testing redirect responses",
					Data: `// Testing redirect responses
{
    Name: "Redirections"
    Request: {
        URL: "http://{{HOST}}/redirect1"
    }
    Checks: [
        {Check: "StatusCode", Expect: 301}
        {Check: "Redirect", To: ".../html"}
        {Check: "Redirect", To: ".../html", StatusCode: 301}
    ]
}`,
				}, &Example{
					Name:        "Test.Speed",
					Description: "Testing the response speed of an application",
					Data: `// Testing the response speed of an application
{
    Name: "Test response time and latency"
    Request: {
        URL: "http://{{HOST}}/html"
        Timeout: 2s
    }
    Checks: [
        {Check: "StatusCode", Expect: 200}

	// Response time of request from above
        {Check: "ResponseTime", Lower: "100ms", Higher: "35ns"}
        
	// Make 200 extra request to the same URL, 4 in parallel.
        {Check: "Latency", N: 200, Concurrent: 4, SkipChecks: true,
            // Check percentiles of response time
            Limits: "50% ≤ 100ms; 80% ≤ 150ms; 95% ≤ 200ms; 0.995 ≤ 0.75s"
        }

	// Dump data 
        {Check: "Latency", N: 20, Concurrent: 4, SkipChecks: true,
            DumpTo: "stdout",
            Limits: "50% ≤ 100ms; 80% ≤ 150ms; 95% ≤ 200ms; 0.995 ≤ 0.75s"
        }


    ]
}`,
				}, &Example{
					Name:        "Test.XML",
					Description: "Testing XML documents",
					Data: `// Testing XML documents
{
    Name: "Test of a XML document"
    Request: {
        URL: "http://{{HOST}}/xml"
    }
    Checks: [
        {Check: "StatusCode", Expect: 200}
        {Check: "UTF8Encoded"}
        {Check: "ContentType", Is: "application/xml"}

        // Presence of element, no condition imposed on value.
        {Check: "XML", Path: "/library/book/character[2]/name" },

        // Check existance and value.
        {Check: "XML"
            Path: "/library/book/character[2]/name"
            Equals: "Snoopy"
         }

        // Check several Conditions on the value:
        {Check: "XML"
            Path: "//book[author/@id='CMS']/title"
            Prefix: "Being"
            Contains: "Dog"
         }
    ]
}`,
				}},
		}},
}
